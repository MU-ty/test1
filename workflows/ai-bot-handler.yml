name: AI Bot Handler

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Check trigger
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Comment: ${{ github.event.comment.body }}"
          echo "Issue: ${{ github.event.issue.number }}"

  handle-bot-command:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '@activity-bot')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/ai-bot/requirements.txt
      
      - name: Parse Bot Command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body;
            
            // 检查是否是extract命令
            if (body.includes('@activity-bot extract')) {
              const urlMatch = body.match(/@activity-bot\s+extract\s+(\S+)(?:\s+(\w+))?/);
              if (urlMatch) {
                core.setOutput('command', 'extract');
                core.setOutput('url', urlMatch[1]);
                core.setOutput('category', urlMatch[2] || 'activity');
                core.setOutput('issue_number', context.issue.number);
                core.setOutput('comment_id', context.payload.comment.id);
              }
            }
            // 检查是否是confirm命令
            else if (body.includes('@activity-bot confirm')) {
              core.setOutput('command', 'confirm');
              core.setOutput('issue_number', context.issue.number);
            }
      
      - name: Handle Extract Command
        if: steps.parse.outputs.command == 'extract'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_MODELS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_URL: ${{ steps.parse.outputs.url }}
          BOT_CATEGORY: ${{ steps.parse.outputs.category }}
          BOT_ISSUE: ${{ steps.parse.outputs.issue_number }}
          BOT_COMMENT_ID: ${{ steps.parse.outputs.comment_id }}
          REPO_PATH: ${{ github.workspace }}
        run: |
          python scripts/ai-bot/bot_handler.py extract
      
      - name: Handle Confirm Command
        if: steps.parse.outputs.command == 'confirm'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_ISSUE: ${{ steps.parse.outputs.issue_number }}
          REPO_PATH: ${{ github.workspace }}
        run: |
          python scripts/ai-bot/bot_handler.py confirm
      
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ai-bot-results
          path: ai-bot-*.json
          retention-days: 7

  create-pull-request:
    runs-on: ubuntu-latest
    needs: handle-bot-command
    if: always() && success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Results
        uses: actions/download-artifact@v3
        with:
          name: ai-bot-results
      
      - name: Create Pull Request
        if: hashFiles('ai-bot-extract-result.json') != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const result = JSON.parse(fs.readFileSync('ai-bot-extract-result.json', 'utf8'));
              
              if (result.success && result.yaml_content) {
                const { exec } = require('child_process');
                
                // 创建新分支
                const branchName = `ai-bot/activity-${result.issue_number}-${Date.now()}`;
                exec(`git checkout -b ${branchName}`);
                
                // 更新文件
                const category = result.category;
                const filePath = `data/${category}s.yml`;
                
                if (fs.existsSync(filePath)) {
                  const content = fs.readFileSync(filePath, 'utf8');
                  const newContent = content + '\n' + result.yaml_content;
                  fs.writeFileSync(filePath, newContent);
                  
                  // 提交
                  exec(`git config user.name "AI Bot"`);
                  exec(`git config user.email "bot@open-source-deadlines.app"`);
                  exec(`git add ${filePath}`);
                  exec(`git commit -m "feat: 添加活动信息 - Issue #${result.issue_number}"`);
                  exec(`git push origin ${branchName}`);
                }
              }
            } catch (e) {
              console.log('No results to process');
            }
