name: AI Bot Handler - Manual Trigger

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to extract'
        required: true
        type: string
      category:
        description: 'Category (activity/conference/competition)'
        required: false
        type: choice
        options:
          - activity
          - conference
          - competition
        default: activity
      issue_number:
        description: 'Issue number to post comment to'
        required: true
        type: number

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  handle-bot-command:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/ai-bot/requirements.txt
      
      - name: Run Bot Handler
        id: bot
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_MODELS_TOKEN: ${{ secrets.GH_MODELS_TOKEN }}
          BOT_URL: ${{ github.event.inputs.url }}
          BOT_CATEGORY: ${{ github.event.inputs.category }}
          BOT_ISSUE: ${{ github.event.inputs.issue_number }}
          REPO_PATH: ${{ github.workspace }}
        run: |
          cd scripts/ai-bot
          python bot_handler_simple.py > /tmp/bot_output.txt 2>&1
          cat /tmp/bot_output.txt
      
      - name: Post Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '/tmp/bot_output.txt';
            
            let commentBody = '';
            
            if (fs.existsSync(path)) {
              commentBody = fs.readFileSync(path, 'utf8').trim();
            }
            
            if (!commentBody) {
              if ('${{ steps.bot.outcome }}' === 'failure') {
                commentBody = '❌ Bot处理失败，请查看Actions日志了解详情。';
              } else {
                commentBody = '⚠️ Bot运行完成，但没有输出。请查看Actions日志。';
              }
            }
            
            github.rest.issues.createComment({
              issue_number: parseInt('${{ github.event.inputs.issue_number }}'),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

